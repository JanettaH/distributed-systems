{"version":3,"sources":["images/logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","height","image","backgroundImage","backgroundRepeat","backgroundColor","palette","type","grey","backgroundSize","backgroundPosition","logo","width","paper","margin","spacing","display","flexDirection","alignItems","avatar","secondary","main","form","marginTop","submit","arrow","App","useState","start","setStart","end","setEnd","response","setResponse","ready","setReady","classes","handleGo","event","a","preventDefault","data","start_link","dest_link","axios","post","console","log","Grid","container","component","className","CssBaseline","item","xs","sm","md","Paper","elevation","square","alt","src","require","Typography","variant","noValidate","TextField","required","fullWidth","label","name","autoComplete","autoFocus","onChange","target","value","fontSize","Button","color","onClick","disabled","CircularProgress","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cb6220c3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a9880c6e.png\";","import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport axios from \"axios\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: \"100vh\"\n  },\n  image: {\n    backgroundImage:\n      \"url(https://ph-files.imgix.net/f750b6ae-a62a-4ccd-8abd-a17483955d1c?auto=format&auto=compress&codec=mozjpeg&cs=strip)\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundColor:\n      theme.palette.type === \"dark\"\n        ? theme.palette.grey[900]\n        : theme.palette.grey[50],\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\"\n  },\n  logo: {\n    width: \"400px\",\n    height: \"80px\"\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  },\n  arrow: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  }\n}));\n\nconst App = () => {\n  const [start, setStart] = useState(\"\");\n  const [end, setEnd] = useState(\"\");\n  const [response, setResponse] = useState(\"\");\n  const [ready, setReady] = useState(true);\n  const classes = useStyles();\n\n  const baseUrl = \"http://localhost:5000/route\";\n\n  const handleGo = async event => {\n    setResponse(\"\");\n    event.preventDefault();\n    const data = {\n      start_link: start,\n      dest_link: end\n    };\n    setReady(false);\n    const response = await axios.post(baseUrl, data);\n    console.log(data);\n    setReady(true);\n    setResponse(response.data);\n  };\n\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n        <div className={classes.paper}>\n          <img\n            className={classes.logo}\n            alt=\"asdsad\"\n            src={require(\"../src/images/logo.png\")}\n          />\n          <br></br>\n\n          <div>\n            <b>You can try for example these routes:</b>\n\n            <p>https://en.wikipedia.org/wiki/Kangaroo</p>\n            <p>https://en.wikipedia.org/wiki/Northern_Europe</p>\n          </div>\n\n          <div>\n            <p>https://en.wikipedia.org/wiki/Venus_Flytrap_(film)</p>\n            <p>https://en.wikipedia.org/wiki/Apple_Inc.</p>\n          </div>\n\n          <div>\n            <p>https://en.wikipedia.org/wiki/Slovakia</p>\n            <p>https://en.wikipedia.org/wiki/Poland</p>\n          </div>\n          <br></br>\n          <Typography component=\"h1\" variant=\"h5\">\n            Find the shortest paths from:\n          </Typography>\n          <form className={classes.form} noValidate>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              label=\"Start\"\n              name=\"start\"\n              autoComplete=\"start\"\n              autoFocus\n              onChange={({ target }) => setStart(target.value)}\n            />\n\n            <div className={classes.arrow}>\n              <ArrowDownwardIcon fontSize=\"large\" />\n            </div>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"end\"\n              label=\"End\"\n              autoComplete=\"end\"\n              onChange={({ target }) => setEnd(target.value)}\n            />\n            {ready === true ? (\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.submit}\n                onClick={handleGo}\n              >\n                Go\n              </Button>\n            ) : (\n              <Button\n                type=\"submit\"\n                disabled\n                fullWidth\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.submit}\n                onClick={handleGo}\n              >\n                Go\n              </Button>\n            )}\n          </form>\n          {ready === false ? <CircularProgress /> : <p></p>}\n          {!!response && (\n            <div>\n              {\" \"}\n              <Typography component=\"h1\" variant=\"h5\">\n                Result:\n              </Typography>{\" \"}\n              {response}\n            </div>\n          )}\n        </div>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}